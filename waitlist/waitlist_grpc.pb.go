// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: waitlist/waitlist.proto

package waitlist_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WaitListClient is the client API for WaitList service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WaitListClient interface {
	OptIn(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Check(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	OptOut(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type waitListClient struct {
	cc grpc.ClientConnInterface
}

func NewWaitListClient(cc grpc.ClientConnInterface) WaitListClient {
	return &waitListClient{cc}
}

func (c *waitListClient) OptIn(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/waitlist.WaitList/OptIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waitListClient) Check(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/waitlist.WaitList/Check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *waitListClient) OptOut(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/waitlist.WaitList/OptOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WaitListServer is the server API for WaitList service.
// All implementations must embed UnimplementedWaitListServer
// for forward compatibility
type WaitListServer interface {
	OptIn(context.Context, *Request) (*Response, error)
	Check(context.Context, *Request) (*Response, error)
	OptOut(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedWaitListServer()
}

// UnimplementedWaitListServer must be embedded to have forward compatible implementations.
type UnimplementedWaitListServer struct {
}

func (UnimplementedWaitListServer) OptIn(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptIn not implemented")
}
func (UnimplementedWaitListServer) Check(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedWaitListServer) OptOut(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptOut not implemented")
}
func (UnimplementedWaitListServer) mustEmbedUnimplementedWaitListServer() {}

// UnsafeWaitListServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WaitListServer will
// result in compilation errors.
type UnsafeWaitListServer interface {
	mustEmbedUnimplementedWaitListServer()
}

func RegisterWaitListServer(s grpc.ServiceRegistrar, srv WaitListServer) {
	s.RegisterService(&WaitList_ServiceDesc, srv)
}

func _WaitList_OptIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaitListServer).OptIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/waitlist.WaitList/OptIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaitListServer).OptIn(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaitList_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaitListServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/waitlist.WaitList/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaitListServer).Check(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _WaitList_OptOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WaitListServer).OptOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/waitlist.WaitList/OptOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WaitListServer).OptOut(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// WaitList_ServiceDesc is the grpc.ServiceDesc for WaitList service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WaitList_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "waitlist.WaitList",
	HandlerType: (*WaitListServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OptIn",
			Handler:    _WaitList_OptIn_Handler,
		},
		{
			MethodName: "Check",
			Handler:    _WaitList_Check_Handler,
		},
		{
			MethodName: "OptOut",
			Handler:    _WaitList_OptOut_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "waitlist/waitlist.proto",
}
